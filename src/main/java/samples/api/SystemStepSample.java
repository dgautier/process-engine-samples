//  ------------------------------------------------------------
//  $Revision:   1.4  $
//  $Date:   09 May 2007 15:48:50  $
//  $Workfile:   SystemStepSample.java  $
//  ------------------------------------------------------------
//  All Rights Reserved.  Copyright (c) 1998-2007 FileNet Corp.
//  ------------------------------------------------------------

package samples.api;

import filenet.vw.api.*;

/**
* This demo class illustrates how to use the helper objects in conjunction
* with VWStepDefinition and VWCompoundStepDefinition objects to programmatically build
* workflows with system steps.
*
*
* @since eProcess 4.1
* @see      Logger
* @see      SystemStepHelper
*/

public class SystemStepSample
{

 /**
  * Constructor - performs initialization.
  *
  * @param vwSession a VWSession object.
  * @param logger the current Logger object.
  * @param queueName the name of the queue in which to create workflows.
  */
  public SystemStepSample(VWSession vwSession, Logger logger, String queueName)
  {

    VWWorkflowDefinition    workflowDef = null;
    VWMapDefinition         mapDef = null;
    VWMapNode               currentStepDef = null;
    VWMapNode               precedingStepDef = null;

    SystemStepHelper        systemStepHelper = new SystemStepHelper(vwSession, logger);

    try
    {
      logger.logAndDisplay("~ Starting SystemStepSample execution.");

      // create the default workflow definition
      workflowDef = new VWWorkflowDefinition();

      // set some properties in the workflow definition.
      workflowDef.setSubject("\"This is the System Step sample workflow\"");
      workflowDef.setDescription("This is a workflow generated by the System Step Sample");
      workflowDef.setName("System Step Workflow");

      // create several fields
      workflowDef.createFieldUsingString("Field1_Integer", "99", VWFieldType.FIELD_TYPE_INT, false);
      workflowDef.createFieldUsingString("Field2_String", "{\"\"}", VWFieldType.FIELD_TYPE_STRING, true);

      // set some properties for the map
      mapDef = workflowDef.getMainMap();
      mapDef.setDescription("This is the sample workflow map");

      // get the launch step and set the description
      currentStepDef = mapDef.getStartStep();
      currentStepDef.setDescription("This is the description for the launch step.");

      // Set up a system step to occur as the first step
      precedingStepDef = currentStepDef;

      VWCompoundStepDefinition sysStepDef = null;
      sysStepDef = systemStepHelper.addCompoundStep(mapDef, "Step 1");

      // create an assignment instruction which initializes "Field1_Integer" to
      // 42 in this system step
      sysStepDef.createAssignInstruction(new String[][] {{"Field1_Integer","42"}} );

      // create a BeginTimer instruction named Timer 1 which will expire in 15
      // minutes after reaching this step, and on expiration will execute the
      // system workflow "Terminate".  This timer will be non-preemptive
      // (will wait until the current step is completed to terminate)

      sysStepDef.createBeginTimerInstruction("\"Timer 1\"", "addminutes(systemtime(),15)", "Terminate", null);
      currentStepDef = sysStepDef;

      // Create a route from the preceeding step to the new one
      precedingStepDef.createRoute(currentStepDef.getStepId());

      precedingStepDef = currentStepDef;

      String userName = vwSession.fetchCurrentUserInfo().getName();

      // create some steps in the "Workflow" (main) map.
      for (int i = 0; i < 3; i++)
      {
        currentStepDef = systemStepHelper.addStep(mapDef, "Step" + i, queueName, userName);
        if (currentStepDef != null)
        {
          // create route
          precedingStepDef.createRoute(currentStepDef.getStepId());

          // reset the preceeding step
          precedingStepDef = currentStepDef;
        }
      }

      sysStepDef = null;
      sysStepDef = systemStepHelper.addCompoundStep(mapDef, "Step 5");

      // Create an end timer instruction which will terminate "Timer 1"
      sysStepDef.createEndTimerInstruction("\"Timer 1\"");
      currentStepDef = sysStepDef;
      // Create a route from the preceeding step to the new one
      precedingStepDef.createRoute(currentStepDef.getStepId());

      // validate the workflow definition
      if (systemStepHelper.validate(workflowDef, vwSession))
      {
        logger.log("Writing workflow definition to file: SystemStepSample.pep");
        workflowDef.writeToFile("SystemStepSample.pep");

        logger.logAndDisplay("~ Launching Generated Workflow");

    // Transfer the workflow definition.
        VWTransferResult transferResult = vwSession.transfer(workflowDef, "uniqueid", false, true);
        String vwVersion = null;
        if (transferResult.success())
        {
          vwVersion = transferResult.getVersion();
          logger.log("The transfer was successful.");
        }
        else
        {
          // display the transfer errors
          String[] errorArray = transferResult.getErrors();
          if (errorArray != null)
            logger.log("\tThe following transfer errors occured: ", errorArray);
          else
            logger.log("\t\tError messages were not available.");
          return;
        }

    // Launch the workflow.
        VWStepElement launchStep = vwSession.createWorkflow(vwVersion);
        launchStep.setComment("This is the System Step sample launch step comment");
        launchStep.doDispatch();
        logger.log("\nThe workflow has been launched successfully");
      }
    }
    catch (Exception ex)
    {
      if (logger != null)
        logger.log(ex);
      else
        ex.printStackTrace();
    }
    finally
    {
      if (logger != null)
      logger.logAndDisplay("~ SystemStepSample execution complete.\n");
    }
  }


  /**
  * Creates the Logger and SessionHelper objects, then
  * instantiates the outer class.
  *
  * @param args a String array contianing command line arguments
  * @since eProcess 4.1
  */
  public static void main(String args[])
  {
    String          queueName = null;
    String          fileName = null;
    Logger          logger = null;
    SessionHelper   sessionHelper = null;
    VWSession       vwSession = null;

    try
    {
      // did the user supply enough arguments?
      if (args.length < 3 || (args.length > 0 && args[0].compareTo("?") == 0))
      {
        System.out.println("Usage:  SystemStepSample username password router_URL [queue_name] [output_file]");
        System.exit(1);
      }

            // the queue name is optional
            if (args.length > 3)
                queueName = args[3];

            // the file name (for output) is optional
            if (args.length > 4)
                fileName = args[4];
            else
                fileName = new String("SystemStepSample.out");

            // create and initialize the logger
            logger = new Logger(fileName);

            // create the session and log in
            sessionHelper = new SessionHelper(args[0], args[1], args[2], logger);
            vwSession = sessionHelper.logon();
            if (vwSession != null)
            {
                // create the sample class
                new SystemStepSample(vwSession, logger, queueName);
            }
        }
        catch (Exception ex)
        {
            if (logger != null)
              logger.log(ex);
                else
                  ex.printStackTrace();
        }
        finally
        {
          // logoff
          if (sessionHelper != null)
            sessionHelper.logoff();
        }
    }
}